package com.gwh.operator;

/**
 * 无符号右移的使用
 *
 * @author tony 18601767221@163.com
 * @version 2021/3/16 12:52
 * @since JDK11
 */
public class UnsignedRightMoveOperator {
    public static void main(String[] args) {
        // 无符号右移动(>>>):二进制补码向右移动,无路符号位是0还是1,左边都会补0, 负数在进行无符号右移之后就会变成一个正数

        /*
           正整数 无符号右移的内存操作过程
           1. 188默认是int类型,占据4个字节 ,二进制的补码表示方式为  0000 0000 0000 0000 0000 0000  1011 1100
           2.  0000 0000 0000 0000 0000 0000  1011 1100 >>> 2
无符号右移两位的结果 000000 0000 0000 0000 0000 0000  1011 11
           3. 转换成十进制的原码输出
           1011 11 转换成十进制的原码结果就是47
         */

        // 188>>>2 等于47
        System.out.println("188 >>> 2 = " + (188 >>> 2));


        /*
            负整数 无符号右移的内存操作过程
              1. -188默认是int类型,占据4个字节 ,二进制的原码表示方式为  1000 0000 0000 0000 0000 0000  1011 1100
              2. 根据原码求补码
              原码   1000 0000 0000 0000 0000 0000  1011 1100
              反码   1111 1111 1111 1111 1111 1111  0100 0011
              补码   1111 1111 1111 1111 1111 1111  0100 0100
              3. 1111 1111 1111 1111 1111 1111  0100 0100 >>>2
 无符号右移两位的结果   001111 1111 1111 1111 1111 1111  0100 01
               4. 转换成十进制的原码输出 最终的输出结果也就是 1073741777
         */


        // -188>>>2 等于1073741777
        System.out.println("-188 >>> 2 = " + (-188 >>> 2));


    }
}
