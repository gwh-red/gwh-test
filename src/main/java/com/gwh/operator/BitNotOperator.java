package com.gwh.operator;

/**
 * 按位取反的使用
 *
 * @author tony 18601767221@163.com
 * @version 2021/3/15 22:08
 * @since JDK11
 */
public class BitNotOperator {

    public static void main(String[] args) {

        // 按位取反是一个单目运算符(一元运算符) ，只能操作一个变量或者表达式

        /*
            正整数的按位取反的计算过程
            245 默认是int，占据四个字节  二进制的补码形式为        0000 0000 0000 0000 0000 0000  1111   0101
             将    0000 0000 0000 0000 0000 0000  1111   0101 进行按位取反操作
             245按位取反的补码结果   1111 1111 1111 1111 1111 1111  0000  1010
             补码转换成原码
             1. 补码转换成反码，补码减1的结果是   1111 1111 1111 1111 1111 1111  0000  1001
             2. 反码转换成原码                 1000 0000 0000 0000 0000 0000  1111  0110
            1000 0000 0000 0000 0000 0000  1111  0110 最高位是1表示负数，最终的结果就是-246
         */
        //  ~245 = -246
        System.out.println("有符号的正整数245按位取反的结果是" + (~245));



        /*
            负整数的按位取反的计算过程
            -245 原码   1000 0000 0000 0000 0000 0000  1111   0101
            -245 反码   1111 1111 1111 1111 1111 1111  0000   1010
            -245 补码   1111 1111 1111 1111 1111 1111  0000   1011
             将补码 1111 1111 1111 1111 1111 1111  0000   1011 按位取反
                   0000 0000 0000 0000 0000 0000  1111   0100  转换成十进制的结果就是244
         */
        // ~ -245 按位取反的结果是244
        System.out.println("有符号的负整数245按位取反的结果是" + (~-245));

    }
}
